###################
沟通机制
###################

|

🤖 沟通机制设计？
===========================
为了使不同agent可以协同完成任务，我们将完成任务的过程分为两阶段:

* **Team Up** : 在这一阶段，Communication Layer的LLM会接收到一个goal（例如是外界用户传入的goal），然后根据Agent Notebook中的信息，决定:
   * 如果之前合作过的agent中有合适的agent，就会向服务器发送组队请求，然后等待服务器返回的群聊id。

   |

   * 如果没有合适的agent，就会向服务器发送agent查找，给出自己认为可以合作的agent的特征，然后等待服务器返回查找到的相关agent列表。并最后发送组队请求。

   |


.. note::

      🌟 Nested Team up：在任务讨论阶段，每个agent在接收并评估被分配的任务时，现在可以选择：

      * 独自完成任务，即被分配的任务直接由Tool Agent完成。

      * 组队完成任务：如果评估结果表明需要与其他agent组队来完成该任务，agent会将该任务作为一个新的goal，并启动新的Team Up过程以组成子团队。这一过程可以根据需要进行嵌套，直至达到设定的嵌套组队深度限制。 系统允许设置每个agent的嵌套组队功能的开关，以及嵌套组队的深度，以提供更灵活的配置。

      |

      我们期望Nested Team Up为我们的Multi-Agent System统带来了前所未有的灵活性与扩展能力。此功能允许Agent根据需要自行决定是否组建新的子团队，以解决更具体的子任务。通过这种嵌套式的团队组建机制，我们的系统能够轻松scale up，处理更为复杂的任务，同时确保高效和灵活的资源分配。

      |

      为什么要有这个机制？因为在Multi-Agent System中，Agent的数量和交互复杂度往往随着任务的规模成指数增长。Nested team up通过创建清晰的层级和角色分工，允许每个小团队集中处理其专长的任务，减少不必要的交互，这样即便团队规模增加，每个小团队内的沟通复杂度仍然保持在可控范围内。

      |

      这种机制为什么能够scale up？因为它提供了一种模块化的扩展方法。当系统需要扩展时，可以简单地增加新的代理小组或在现有小组内增加代理，每个新加入的代理只需与其直接关联的小组沟通，而不是整个系统，这极大降低了系统整体的沟通负担。通过这种多层嵌套，LLM-based Multi-Agent System能够高效地扩展以处理更大规模的任务，同时仍然保持每个小团队的高效性。


* **Coordination**: 在这一阶段，Communication Layer可以向刚刚创建的群聊中发送消息。接下来这个群就负责完成这个goal了。

|

Coordination是最复杂的阶段。为了使得agent之间可以比较高效地进行沟通，我们实现了一些机制:

* **沟通顺序** : 为了可控性，每个时刻我们只允许一个agent说话，在它说完之后，自己决定下一个说话的agent。

|

* **消息类型** : 我们定义了不同的消息类型供agent自行选择，包括:

   * **DISCUSSION** : 正常的讨论信息。

   |

   * **SYNC_TASK_ASSIGNMENT** : 同步任务分配，在这一消息中，agent会向其他agent分配任务，讨论将等到任务完成后，得到结果反馈才会继续。

   |

   * **ASYNC_TASK_ASSIGNMENT** : 异步任务分配，在这一消息中，agent会向其他agent分配任务，同时讨论继续，不会阻塞。被指派任务的agent会去执行，并在执行完成后立刻把结果发到群里。

   |

   * **INFORM_TASK_RESULT** : 任务执行结果的反馈。

   |

   * **INFORM_TASK_PROGRESS** : 被分配到异步任务后，发送一条消息确认收到任务。

   |

   * **PAUSE** : agent决定暂停讨论，直到某个之前异步分配出去的任务完成再继续。

   |

   * **CONCLUDE_GROUP_DISCUSSION** : 讨论结束，任务完成。


